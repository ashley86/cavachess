{% extends 'layout.html.twig' %}
{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" type="text/css" href={{ asset('css/chessboard-0.3.0.css')}}>
{% endblock %}

{% block content %}
    <h1>Cavachess</h1>
    <hr>
    <div class="row">
        {# GAME INFO #}
        <div class='col-sm-12'>
            <h3 id="adversaire"></h3>
        </div>        
        <div id="info" class='col-sm-12'>
            <p>En attente d'un adversaire...</p>
        </div>
        {# END GAME INFO #}
        
        {# BOARD #}
        <div class="col-md-8 col-sm-12 game-padding-md">
            <section id="jeu">
                <div id="board"></div>
                <div class="chrono toggle-display">
                    <div class="player2-infos text-center"><span class="glyphicon glyphicon-king"></span>&nbsp;&nbsp;<span id="player2username"></span></div>
                    <div id="clockdivp2">
                        <p class="text-center"><span class="hours"></span>:<span class="minutes"></span>:<span class="seconds"></span></p>
                    </div>
                    <div id="game-status" class="text-center"><p><span id="status"></span></p></div>
                    <div id="game-history hidden-xs"><p><span id="pgn"></span></p></div>
                    
                    <div class="player1-infos text-center"><span class="glyphicon glyphicon-king"></span>&nbsp;&nbsp;<span id="player1username"></span></div>
                    <div id="clockdivp1">
                        <p class="text-center"><span class="hours"></span>:<span class="minutes"></span>:<span class="seconds"></span></p>
                    </div>                    
                </div>
                <div class="clearfix"></div>
            </section>
        </div>
        {# END BOARD #}
        {# CHAT #}
        <div class="col-md-4 col-sm-12 chat-padding-md hidden-xs">
            <aside id="chat">
                <div id="chat-output">
                </div>
                <form id="chat-input">
                    <textarea id="chat-textarea" name="message"></textarea>
                    <input type="submit" id="chat-submit" value="Envoyer" class="btn btn-default btn-block btn-ok" />
                </form>
            </aside>
        </div>
        {# END CHAT #}
    </div>
    
    <div
        id="js-vars"
        data-vars="{{ js_vars|json_encode|e('html_attr') }}">
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="http://localhost:3000/socket.io/socket.io.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.2/chess.js"></script>
    <script src="{{ asset('js/chessboard-0.3.0.js')}}"></script>				
    <script src="{{ asset('js/countdown.js')}}"></script>				
    <script src="{{ asset('js/gamecontent.js')}}"></script>				
    <script>

        // Getting data from service js_vars
        var JsVars = $('#js-vars').data('vars');    
        // var obj from service js_vars
        var chartData = JsVars.chartData;

        /* Initialization */
        var connected = false; // not connected
        var gameisstarted = false; // game not started
        var username = chartData.user; // player username
        var competition = chartData.competition; // game competition
        var gametime = chartData.gametime; // game time limit
        var ingameclock = {
            hours : parseInt(gametime.substr(0,2)),
            minutes: parseInt(gametime.substr(3,2)),
            seconds: parseInt(gametime.substr(6,2))
        };
        var rank = chartData.rank; // player rank
        var rankopponent; // opponent rank
        var room = ''; // socket room
        var player = ''; // player color ('white' or 'black')
        var opponent = ''; // username of your opponent
        var gameisover = ''; // game end (win, draw, loss)
        var timeisover = ''; // time running out
        var nbplays = 0; // total plays
        var nbplaysuser = 0; // total plays player
        var nbplaysopponent = 0; // total plays opponent
        var gamelengthwinner; // time played by the winner
        var gamelengthlooser; // time played by the looser
        var urlajax = "{{ path('app_game_registergame')}}";
        var urlajaxrank = "{{ path('app_game_updaterank')}}";
        
        /* DOM elements */
        var gamecontent = $("#jeu");
        var infocontent = $("#info");
        var opponentcontent = $("#adversaire");
        var chatoutput = $("#chat-output");
        var chatinput = $("#chat-input");
        var chattextarea = $("#chat-textarea");
                   
        /* Connexion au serveur */
        // fire un événement 'connection' coté serveur et 'connect' coté client
        var socket = io("http://localhost:3000");
        
        /* Envoi du pseudo au serveur */
        socket.on('connect', function(data) {
            connected = true; // Connecté
            socket.emit('login', {'username' : username, 'competition': competition, 'rank' : rank}); // Envoie de l'event 'login' qui contient mon username
        });
        
        /* Websocket server 'gameStart' event response, initializing game */
        socket.on('gameStart', function(data) {
            gameisstarted = true;
            room = data.room;
            player = data.color;   
            opponent = data.name;
            rankopponent = data.rank;
            opponentcontent.html(username+" ("+rank+" points), joue en "+ data.color +" contre "+data.name+" ("+data.rank+" points)");
            /* Nom des joueurs pour le chronomètre */
            if(player === 'white'){
                $("#player1username").text(username +" "+ rank + " points");
                $("#player2username").text(data.name + " "+ data.rank +" points");
            }
            else{
                $("#player1username").text(data.name + " "+ data.rank +" points");
                $("#player2username").text(username +" "+ rank + " points");
            }
            
            /* Display */
            gamecontent.find(".chrono").removeClass('toggle-display');
            infocontent.text('');
            
            /* Initializing timers */
            var clock = Date.parse(new Date(Date.parse(new Date()) + ((ingameclock.hours*60*60) + (ingameclock.minutes * 60) + ingameclock.seconds) * 1000));
            initializeClockp1('clockdivp1', clock);
            initializeClockp2('clockdivp2', clock);
            clearInterval(timeintervalp2);
        });
        
        /* Websocket server 'endGame' event response, disconnecting user when opponent has left */
        socket.on('gameEnd', function(data) {
            infocontent.text("Votre adversaire a quitté la partie");
            //setTimeout(setLocation, 5000);
            
            if(!gameisover){
                clearInterval(timeintervalp2);
                clearInterval(timeintervalp1);
                opponentcontent.html("Partie terminée, vous avez gagné");
                gameisover = 'youwin';
                /* Registering game info when game ended */
                totalgamelength = gamelength(ingameclock, getClockp1(), getClockp2(), 'total');
                if(player === 'white'){
                    gamelengthwinner = gamelength(ingameclock, getClockp1(), getClockp2(), 'white');
                    gamelengthlooser = gamelength(ingameclock, getClockp1(), getClockp2(), 'black');    
                }
                else{
                    gamelengthwinner = gamelength(ingameclock, getClockp1(), getClockp2(), 'black');
                    gamelengthlooser = gamelength(ingameclock, getClockp1(), getClockp2(), 'white');       
                }
                registerGame(urlajax, username, opponent, totalgamelength, gamelengthwinner, gamelengthlooser, nbplays, nbplaysuser, nbplaysopponent, competition);
                
                /* Updating rank */
                updateRank(urlajaxrank, username, opponent,  rank, rankopponent, competition);
            } 
            room = '';         
        });

        /* Websocket server 'gameOver' event response, displaying game draw or game loss */
        socket.on('gameOver', function(data) {
            clearInterval(timeintervalp2);
            clearInterval(timeintervalp1);
            if (data === 'youwin'){
                gameisover = 'youloose';
                opponentcontent.html("Partie terminée, vous avez perdu");
            }
            else if (data === 'draw'){
                gameisover = 'draw';
                opponentcontent.html("Partie terminée, match nul");
            }          
            room = '';
        });
        
        /* Function location assignment */
        function setLocation()
        {
            window.location.assign("{{path('app_competition_displaycompetitions')}}");
        }
        
        /* Function scrolltobottom for chat */
        function scrollToBottom () {
            var wtf = $("#chat-output");
            var height = wtf[0].scrollHeight;
            wtf.scrollTop(height);
        };
        
        /* Chat emit */
        chatinput.on("submit", function(e) {
            e.preventDefault();
            var message = chattextarea.val();
            socket.emit('chatmessage', {'message' : message, 'username' : username});
            chattextarea.val("");
            scrollToBottom();
        });
        
        /* Chat server response */
        socket.on('receptionmessage', function(data) {
            var message = $('<p>').text(data);
            chatoutput.append(message);
            scrollToBottom();
        });
        

    </script>    
    <script src="{{ asset('js/board.js')}}"></script>    
    <script src="{{ asset('js/registergame.js')}}"></script>    
{% endblock %}